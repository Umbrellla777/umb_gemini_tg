####--------------------------------####
#--# Author:   by Umbrellla777      #--#
#--# Telegram: @Umbrellla777        #--#
#--# VK:       @Umbrellla777        #--#
####--------------------------------####

###########################
## –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
###########################
import sys
import asyncio
import time
import emoji
import random


from asyncio import sleep
from collections import deque
from telethon.sync import TelegramClient
from telethon import TelegramClient
from telethon import events

##from telethon                       import functions, types
##from telethon.tl.types              import ChatBannedRights
##from telethon.tl.functions.users    import GetFullUserRequest
##from telethon.tl.functions.channels import EditBannedRequest


###########################
## –¶–≤–µ—Ç –∫–æ–Ω—Å–æ–ª–∏
###########################
red = [206, 76, 54]
green = [68, 250, 123]
blue = [253, 127, 233]
yellow = [241, 250, 118]
orange = [255, 184, 107]


def colored(color, text):
    return "\033[38;2;{};{};{}m{}\033[38;2;255;255;255m".format(color[0], color[1], color[2], text)


###########################
## –ù–∞—Å—Ç—Ä–æ–π–∫–∏
###########################
api_id = int(sys.argv[1])
api_hash = str(sys.argv[2])

## Connect
client = TelegramClient('users/current_user', api_id, api_hash)
client.start()

###########################
## –ò–º–ø–æ—Ä—Ç –ø–∞–ø–æ–∫|–¥–æ–±–∞–≤–∏—Ç—å
###########################

###########################
## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫–∫–∞—É–Ω—Ç–µ
###########################
entity = client.get_entity("me")
MY_ID = entity.id
print(
    "["
    + colored(green, "PROFILE: ")
    + str(entity.first_name)
    + " | " + colored(orange, "Id: ") + str(MY_ID)
    + " | " + colored(orange, "Uname: ") + "@" + str(entity.username)
    + "]"
)

###########################
## –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
###########################
@client.on(events.NewMessage(pattern='.help'))
async def help(event):
    message = event.message
    await message.edit("–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. \n–°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n.ping –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.\n.8 –∞–Ω–∏–º–∞—Ü–∏—è - –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ 8 –º–∞—Ä—Ç–∞.\n.lv –∞–Ω–∏–º–∞—Ü–∏—è - —Å–µ—Ä–¥—Ü–µ.\n@all –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.\n.coin –ú–æ–Ω–µ—Ç–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è - –û—Ä—ë–ª, —Ä–µ—à–∫–∞, –∫–∞–Ω—Ç.\n.rtext –±–µ–≥—É—â–∞—è –ø–æ–ª–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞.\n.roll –°–ª—É—á–∞–π–Ω–æ —á–∏—Å–ª–æ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–≤–µ–¥—ë–Ω—ã–º–∏.\n.type –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.\n.moon –ü–æ–∂–µ–ª–∞–Ω–∏–µ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, —Å–æ —Å–º–µ–Ω–æ–π —Ñ–∞–∑—ã –ª—É–Ω—ã.\n.bunny –ê–Ω–∏–º–∞—Ü–∏—è —Å –∫—Ä–æ–ª–∏–∫–æ–º.\n\n–¢–∞–∫ –∂–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ t.me/umbrellla777bot \n Author Umbrellla777 \n VK @Umbrellla777\n TG @Umbrellla777")


###########################
## –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
###########################
@client.on(events.NewMessage(pattern='.ping'))
async def pong(event):
    message = event.message
    await message.edit("pong")




##########################
## –ê–Ω–∏–º–∞—Ü–∏—è .8|5√ó10
###########################
@client.on(events.NewMessage(pattern='.8'))
async def draw_matrix(event):
    message = event.message
    matrix = '12221\n21112\n21112\n21112\n12221\n21112\n21112\n21112\n21112\n12221'
    end = '00000000\n00000000\n00000000\n0–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! 0\n00000000\n00000000\n00000000'

    matrix = matrix.replace('1', '‚¨úÔ∏è').replace('2', '‚¨õÔ∏è')

    await message.edit(matrix)

    await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É

    matrix = matrix.replace('‚¨úÔ∏è', '‚óªÔ∏è').replace('‚¨õÔ∏è', '‚óºÔ∏è')
    await message.edit(matrix)

    await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É

    matrix = matrix.replace('‚óªÔ∏è', '‚óΩÔ∏è').replace('‚óºÔ∏è', '‚óæÔ∏è')
    await message.edit(matrix)

    await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É

    matrix = matrix.replace('‚óΩÔ∏è', '‚ñ´Ô∏è').replace('‚óæÔ∏è', '‚ñ™Ô∏è')
    await message.edit(matrix)
    
    await asyncio.sleep(1)
    await message.edit('–≠—Ç–æ —Ç–≤–æ–π –¥–µ–Ω—å!')
    await asyncio.sleep(2)
    await message.edit('–°–∏—è–π!')
    await asyncio.sleep(2)
    await message.edit('–î–µ–π—Å—Ç–≤—É–π!')
    await asyncio.sleep(2)
    await message.edit('–ù–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ!')
    await asyncio.sleep(2)
    await message.edit('–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!')
    await asyncio.sleep(2)
    await message.edit('–ë—É–¥—å —Å–æ–±–æ–π!')
    await asyncio.sleep(2)
    await message.edit('‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®')
    await asyncio.sleep(2)
    await message.edit('–ò –ø—Ä–æ—Å—Ç–æ...')
    end = end.replace('0', '‚ù§Ô∏è')
    await asyncio.sleep(2)
    await message.edit(end)
    end = end.replace('‚ù§Ô∏è', '‚ù§Ô∏è‚Äçüî•')
    await asyncio.sleep(2)
    await message.edit(end)



##########################
## –ê–Ω–∏–º–∞—Ü–∏—è .lv
##########################
@client.on(events.NewMessage(pattern=r"\.lv", outgoing=True))
async def watcher(event):
	message = event
	if message.sender_id == (await message.client.get_me()).id:
		arr = ["üü•", "üüß", "üü®", "üü©", "üü¶", "üü™", "üü´", "‚¨õÔ∏è", "üî≥"]
		h = "‚¨úÔ∏è"
		first = ""		
		for i in "".join([h*9, "\n", h*2, arr[0]*2, h, arr[0]*2, h*2, "\n", h, arr[0]*7, h, "\n", h, arr[0]*7, h, "\n", h, arr[0]*7, h, "\n", h*2, arr[0]*5, h*2, "\n", h*3, arr[0]*3, h*3, "\n", h*4, arr[0], h*4]).split("\n"):
			first += i + "\n"
			await message.edit(first)
			await sleep(0.2)		
		for i in arr:
			await message.edit("".join([h*9, "\n", h*2, i*2, h, i*2, h*2, "\n", h, i*7, h, "\n", h, i*7, h, "\n", h, i*7, h, "\n", h*2, i*5, h*2, "\n", h*3, i*3, h*3, "\n", h*4, i, h*4, "\n", h*9]))
			await sleep(0.3)
		for _ in range(8):
			rand = random.choices(arr, k=34)
			await message.edit("".join([h*9, "\n", h*2, rand[0], rand[1], h, rand[2], rand[3], h*2, "\n", h, rand[4], rand[5], rand[6], rand[7], rand[8],rand[9],rand[10], h, "\n", h, rand[11], rand[12], rand[13], rand[14], rand[15], rand[16],rand[17], h, "\n", h, rand[18], rand[19], rand[20], rand[21], rand[22], rand[23],rand[24], h, "\n", h*2, rand[25], rand[26], rand[27], rand[28], rand[29], h*2, "\n", h*3, rand[30], rand[31], rand[32], h*3, "\n", h*4, rand[33], h*4, "\n", h*9]))
			await sleep(0.3)
		fourth = "".join([h*9, "\n", h*2, arr[0]*2, h, arr[0]*2, h*2, "\n", h, arr[0]*7, h, "\n", h, arr[0]*7, h, "\n", h, arr[0]*7, h, "\n", h*2, arr[0]*5, h*2, "\n", h*3, arr[0]*3, h*3, "\n", h*4, arr[0], h*4, "\n", h*9])
		await message.edit(fourth)
		for _ in range(47):
			fourth = fourth.replace("‚¨úÔ∏è", "üü•", 1)
			await message.edit(fourth)
			await sleep(0.1)
		for i in range(8):
			await message.edit((arr[0]*(8-i)+"\n")*(8-i))
			await sleep(0.4)
		for i in ["I", "I ‚ù§Ô∏è", "I ‚ù§Ô∏è U", "I ‚ù§Ô∏è U!",'i ‚ù§Ô∏è U', 'I ‚ù§Ô∏è u', 'I ‚ù§Ô∏è U']:
			await message.edit(f"<b>{i}</b>", parse_mode='html')
			await sleep(0.5)
##########################
## –ê–Ω–∏–º–∞—Ü–∏—è .rtext
##########################
@client.on(events.NewMessage(pattern=r"\.rtext", outgoing=True))
async def rtext(event):
    if event.fwd_from:
        return
    try:
        txt1 = event.message.message
    except:
        txt1 = event.original_update.message.message

    text = ' '.join(str(txt1).split(' ')[1:])
    deq = deque(list(text))
    for _ in range(len(deq) + 1):
        await asyncio.sleep(0.1)
        try:
            await event.edit(f'''{"".join(deq)}''')
        except:
            pass
        deq.rotate(1)

##########################
## –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ @all
##########################
@client.on(events.NewMessage(pattern=r"\@all", outgoing=True))
async def tagallcmd(event):
	global args
	args = ''
	try:
		txt1 = event.message.message
	except:
		txt1 = event.original_update.message.message
	if len(txt1.split(' ')) != 1:
		args = txt1.split(' ')[1]
	global tag_
	tag_ = 10
	notext = False
	if args:
		if args.isdigit():
			tag_ = int(args)

				
	await event.delete()
	chat = await event.get_chat()
	all = client.iter_participants(chat.id)
	chunk = []
	def chunks(lst, n):
		for i in range(0, len(lst), n):
			yield lst[i:i + n]

	notifies = []
	async for user in all:
		notifies.append("<a href=\"tg://user?id="+ str(user.id) +"\">\u206c\u206f</a>")
	chunkss = list(chunks(notifies, tag_))
	await event.delete()
	for chunk in chunkss:
		await client.send_message(chat.id, '\u206c\u206f'.join(chunk), parse_mode='html')
##########################
## –ê–Ω–∏–º–∞—Ü–∏—è .type
##########################
@client.on(events.NewMessage(pattern=r"\.type", outgoing=True))
async def type(event):
    orig_text = event.raw_text.split(".type ", maxsplit=1)[1]
    text = orig_text
    tbp = ""  # to be printed
    typing_symbol = "‚ñí"

    while tbp != orig_text:
        try:
            await event.edit(tbp + typing_symbol)
            await asyncio.sleep(0.05)  # 50 ms

            tbp = tbp + text[0]
            text = text[1:]

            await event.edit(tbp)
            await asyncio.sleep(0.05)

        except FloodWait as e:
            await asyncio.sleep(e.x)
##########################
## –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ .coin
##########################
@client.on(events.NewMessage(pattern=r"\.coin"))
async def coin_flip(event):
    message = event.message
    await message.edit("–ü–æ–¥–∫–∏–¥—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É...")
    await asyncio.sleep(3)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
    result = random.choices(["–æ—Ä–µ–ª", "—Ä–µ—à–∫–∞", "–∫–∞–Ω—Ç"], weights=[0.4995, 0.4995, 0.001])[0]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–Ω—Ç–∞ 0.1
    await message.edit(f"–õ–æ–≤–ª—é –º–æ–Ω–µ—Ç–∫—É...")
    await asyncio.sleep(3)
    await message.edit(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
##########################
## –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ .roll
##########################
@client.on(events.NewMessage(pattern=r"\.roll\s+(\d+)\s+(\d+)"))
async def roll_dice(event):
    message = event.message
    min_num = int(event.pattern_match.group(1))
    max_num = int(event.pattern_match.group(2))
    if min_num > max_num:
        await message.edit("–û—à–∏–±–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.")
        return
    result = random.randint(min_num, max_num)
    await message.edit(f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É {min_num} –∏ {max_num} (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ): {result}")
##########################
## –ü–æ–∂–µ–ª–∞–Ω–∏–µ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ —Å–æ —Å–º–µ–Ω–æ–π —Ñ–∞–∑—ã –ª—É–Ω—ã .moon
##########################
@client.on(events.NewMessage(pattern=r"\.moon", outgoing=True))
async def moon_animation(event):
    moon_message = event.message
    moon_stickers = ["üåñ", "üåó", "üåò", "üåë", "üåí", "üåì", "üåî","üåï"]
    
    await moon_message.edit("–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!üåï")
    for sticker in moon_stickers:
        await asyncio.sleep(0.5)
        await moon_message.edit(f"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!{sticker}")
##########################
## –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä–æ–ª–∏–∫ –∏ —Å–µ—Ä–¥–µ—á–∫–æ .bunny
##########################
@client.on(events.NewMessage(pattern=r"\.bunny"))
async def bunny_heart(event):
    message = event.message
    await message.edit("/) /)\n( ‚Ä¢. ‚Ä¢)\n (  „Å•üåπ –•–æ—á–µ—à—å —Ä–æ–∑—É?")
    await asyncio.sleep(2) 
    await message.edit(f"/) /)\n( ‚Ä¢. ‚Ä¢)\n (  „Å•üçì –ú–æ–∂–µ—Ç –∫–ª—É–±–Ω–∏—á–∫—É?)")
    await asyncio.sleep(2)
    await message.edit(f"(\ (\ \n(‚Ä¢ .‚Ä¢ )\nüçì‚äÇ) –ù–µ—Ç, –∫–ª—É–±–Ω–∏—á–∫—É —è —Å–∞–º —Å—Ö–æ–º—è—á—É!üòã")
    await asyncio.sleep(2)
    await message.edit(f"/) /)\n( ‚Ä¢. ‚Ä¢)\n (  „Å•‚ù§Ô∏è –õ—É—á—à–µ –≤–æ–∑—å–º–∏ –º–æ—ë —Å–µ—Ä–¥–µ—á–∫–æ!")


client.run_until_disconnected()
